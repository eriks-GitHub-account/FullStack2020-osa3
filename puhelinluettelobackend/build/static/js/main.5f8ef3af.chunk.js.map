{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","Filter","handleFilter","filter","value","onChange","PersonForm","props","onSubmit","addPerson","newName","handleName","newNumber","handleNumber","type","Persons","person","deleteP","name","number","onClick","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personService","then","response","data","namesToShow","toUpperCase","includes","event","target","preventDefault","personObject","some","a","window","alert","concat","setTimeout","map","key","confirm","removedPerson","find","p","catch","error","deletePerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"uPACMA,EAAU,yDAkBD,EAhBA,WACX,OAAOC,IAAMC,IAAIF,IAeN,EAZA,SAAAG,GACX,OAAOF,IAAMG,KAAKJ,EAASG,IAWhB,EAJA,SAACE,GACZ,OAAOJ,IAAMK,OAAN,UAAgBN,EAAhB,YAA2BK,KCbhCE,EAAS,SAAC,EAAD,GAA4B,IAA1BC,EAAyB,EAAzBA,aAAeC,EAAU,EAAVA,OAC9B,OACA,mDACmB,2BAAOC,MAAOD,EACjCE,SAAWH,MAIPI,EAAa,SAACC,GAClB,OACA,0BAAMC,SAAUD,EAAME,WACtB,sCACQ,2BAAOL,MAAOG,EAAMG,QAC1BL,SAAWE,EAAMI,cAEnB,wCACU,2BAAOP,MAAOG,EAAMK,UAC5BP,SAAUE,EAAMM,gBAClB,6BACE,4BAAQC,KAAK,UAAb,UAKIC,EAAU,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QACxB,OACE,4BACGD,EAAOE,KADV,IACiBF,EAAOG,OACtB,4BAAQC,QAASH,GAAjB,YAKAI,EAAe,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,QAASR,EAAS,EAATA,KAC9B,OAAe,OAAZQ,EACM,KAEG,UAATR,EAED,yBAAKS,UAAU,SACZD,GAKH,yBAAKC,UAAU,WACZD,IAmHME,EA5GH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGgBF,mBAAS,IAHzB,mBAGRf,EAHQ,KAGCkB,EAHD,OAIoBH,mBAAS,IAJ7B,mBAIRb,EAJQ,KAIGiB,EAJH,OAKcJ,mBAAS,IALvB,mBAKRtB,EALQ,KAKA2B,EALA,OAMwBL,mBAAS,IANjC,mBAMTM,EANS,KAMKC,EANL,OAO4BP,mBAAS,IAPrC,mBAOTQ,EAPS,KAOOC,EAPP,KAShBC,qBAAU,WACRC,IAEGC,MAAK,SAAAC,GACJX,EAAWW,EAASC,WAEvB,IAEH,IAiEMC,EAAwB,KAATrC,EACjBuB,EACAA,EAAQvB,QAAO,SAAAa,GAAM,OAAIA,EAAOE,KAAKuB,cAAcC,SAASvC,EAAOsC,kBAEvE,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcnB,QAAWS,EAAcjB,KAAK,UAC5C,kBAAC,EAAD,CAAcQ,QAAWW,EAAgBnB,KAAK,YAC9C,kBAAC,EAAD,CAAQZ,aAZe,SAACyC,GAC1Bb,EAAUa,EAAMC,OAAOxC,QAWuBD,OAAQA,IACpD,yCACA,kBAAC,EAAD,CAAYM,UA5EE,SAACkC,GACjBA,EAAME,iBACN,IAAMC,EAAe,CACnB5B,KAAOR,EACPS,OAASP,GAERc,EAAQqB,MAAK,SAAAC,GAAC,OAAEA,EAAE9B,OAASR,KAC5BuC,OAAOC,MAAP,UAAgBxC,EAAhB,mCAEA0B,EACUU,GACPT,MAAK,SAAAC,GACJX,EAAWD,EAAQyB,OAAOb,EAASC,OACnCX,EAAW,IACXC,EAAa,IACbK,EAAkB,GAAD,OACZY,EAAa5B,KADD,wBAGjBkC,YAAW,WACTlB,EAAkB,QACjB,SAwD6BxB,QAASA,EAC7CC,WAvBqB,SAACgC,GACxBf,EAAWe,EAAMC,OAAOxC,QAsBQQ,UAAWA,EACzCC,aApBuB,SAAC8B,GAC1Bd,EAAac,EAAMC,OAAOxC,UAoBxB,uCACCoC,EAAYa,KAAI,SAACrC,GAAD,OACjB,kBAAC,EAAD,CAASsC,IAAKtC,EAAOjB,GACrBiB,OAAUA,EACVC,QAAU,kBA1DO,SAAClB,EAAImB,GAGxB,IAAoB,IAFC+B,OAAOM,QAAP,iBAAyBrC,EAAzB,MAEI,CACzB,IAAMsC,EAAgB9B,EAAQ+B,MAAK,SAAAC,GAAC,OAAIA,EAAE3D,KAAOA,KACjDqC,EACUrC,EAAIyD,GACXnB,KACCV,EAAWD,EAAQvB,QAAO,SAAAuD,GAAC,OAAIA,EAAE3D,KAAOA,MACxCmC,EAAkB,GAAD,OACZhB,EADY,4BAGjBkC,YAAW,WACTlB,EAAkB,QACjB,MAEJyB,OAAM,SAAAC,GACL5B,EAAgB,GAAD,OACVd,EADU,qCAGfkC,YAAW,WACTpB,EAAgB,QACf,KACHL,EAAWD,EAAQvB,QAAO,SAAAuD,GAAC,OAAIA,EAAE3D,KAAOA,UAmC5B8D,CAAa7C,EAAOjB,GAAIiB,EAAOE,cChJ/B4C,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLgB,QAAQhB,MAAMA,EAAMtC,c","file":"static/js/main.5f8ef3af.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://mighty-citadel-73878.herokuapp.com/api/persons'\n\nconst getAll = () =>{\n    return axios.get(baseUrl)\n}\n\nconst create = newObject =>{\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`)\n}\n\nconst remove = (id) =>{\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {getAll, create, update, remove}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Filter = ({handleFilter},{filter})=>{\n  return(\n  <div>\n  filter shown with: <input value={filter}\n  onChange ={handleFilter}/>\n</div>\n)}\n\nconst PersonForm = (props)=>{\n  return(\n  <form onSubmit={props.addPerson}>\n  <div>\n    name: <input value={props.newName}\n    onChange ={props.handleName}/>\n  </div>\n  <div>\n    number: <input value={props.newNumber} \n    onChange={props.handleNumber}/></div>\n  <div>\n    <button type=\"submit\">add</button>\n  </div>\n</form>\n  )}\n\n  const Persons = ({person, deleteP})=>{\n    return(\n      <li>\n        {person.name} {person.number}\n        <button onClick={deleteP}>Delete</button>\n      </li>\n    )\n  }\n\n  const Notification = ({message, type}) =>{\n    if(message === null){\n      return null\n    }\n    if(type === 'error'){\n    return (\n      <div className='error'>\n        {message}\n      </div>\n    )\n    }\n    return (\n      <div className='success'>\n        {message}\n      </div>\n    )\n  }\n\n\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  const [successMessage, setSuccessMessage] = useState('')\n\n  useEffect(()=>{\n    personService\n      .getAll()\n      .then(response=>{\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addPerson = (event) =>{\n    event.preventDefault()\n    const personObject = {\n      name : newName,\n      number : newNumber\n    }\n    if(persons.some(a=>a.name === newName)){\n      window.alert(`${newName} is already added to phonebook`)\n    }else{\n      personService\n        .create(personObject)\n        .then(response =>{\n          setPersons(persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n          setSuccessMessage(\n            `${personObject.name} added to phonebook`\n          )\n          setTimeout(()=>{\n            setSuccessMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const deletePerson = (id, name) =>{\n    const confirmation = window.confirm(`Delete ${name}?`)\n\n    if(confirmation === true){\n    const removedPerson = persons.find(p => p.id === id)\n    personService\n      .remove(id, removedPerson)\n      .then( \n        setPersons(persons.filter(p => p.id !== id)),\n        setSuccessMessage(\n          `${name} removed from phonebook`\n        ),\n        setTimeout(()=>{\n          setSuccessMessage(null)\n        }, 5000)\n      )\n      .catch(error=> {\n        setErrorMessage(\n          `${name} was already removed from server`\n        )\n        setTimeout(()=>{\n          setErrorMessage(null)\n        }, 5000)\n        setPersons(persons.filter(p => p.id !== id))\n      })\n    }\n  }\n\n\n  const handleNameChange = (event) =>{\n    setNewName(event.target.value)\n  }  \n\n  const handleNumberChange = (event) =>{\n    setNewNumber(event.target.value)\n  }  \n  \n  const handleFilterChange = (event) =>{\n    setFilter(event.target.value)\n  }\n  const namesToShow = (filter===\"\")\n    ? persons\n    : persons.filter(person => person.name.toUpperCase().includes(filter.toUpperCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {errorMessage} type='error'/>\n      <Notification message = {successMessage} type='success'/>\n      <Filter handleFilter = {handleFilterChange} filter={filter}/>\n      <h2>Add a new</h2>\n      <PersonForm addPerson = {addPerson} newName={newName}\n      handleName={handleNameChange} newNumber={newNumber}\n      handleNumber={handleNumberChange}/>\n      <h2>Numbers</h2> \n      {namesToShow.map((person)=>\n      <Persons key={person.id}\n      person = {person}\n      deleteP ={()=>deletePerson(person.id, person.name)}\n      />\n      )} \n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}